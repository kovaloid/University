/*
¬ажно!!! Ќужно использовать /MTd вместо /MLd, чтобы указать компил€тору, что код будет многопоточным.
—оздайте два дополнительных потока в вашем процессе. ѕусть функци€ вашего первого потока в бесконечном цикле 
выводит сообщение (например, Уя поток 1 и € выполн€юсь!Ф), а функци€ вашего второго потока в бесконечном цикле 
выводит сообщение (например, Уя поток 2 и € выполн€юсь!Ф). Ѕазовый поток после создани€ этих двух дополнительных 
потоков пусть тоже в бесконечном цикле выводит сообщение (например, Уя базовый поток и € выполн€юсь!Ф). ƒобейтесь 
того, чтобы каждый из трех потоков поочередности выводил на экран эти слова.
«атем измените программу так, чтобы после создани€ двух дополнительных потоков, базовый поток заканчивал работу. ќбъ€сните полученный вывод.
“еперь измените программу так, чтобы после создани€ двух дополнительных потоков, базовый поток вызывал функцию Sleep. ќбъ€сните полученный вывод.
*/

#include <windows.h>
#include <stdio.h>
#include <string.h>
#include <conio.h>

DWORD WINAPI First_Func(LPVOID)
{
	while (TRUE)
	{
		printf("I'm the first thread!\n");
		Sleep(500);
	}
	return 0;
}

DWORD WINAPI Second_Func(LPVOID)
{
	while (TRUE)
	{
		printf("I'm the second thread!\n");
		Sleep(500);
	}
	return 0;
}

int main()
{
	DWORD targetThreadId = NULL;
	CreateThread(NULL, 0, First_Func, NULL, 0, &targetThreadId);
	CreateThread(NULL, 0, Second_Func, NULL, 0, &targetThreadId);

	while (TRUE)
	{
		printf("I'm the main thread!\n");
		Sleep(500);
	}
	//Sleep(20000);

	return 0;
}